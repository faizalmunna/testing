import {
  createSlice,
  // createSelector,
  // PayloadAction,
  createAsyncThunk,
} from "@reduxjs/toolkit";
import axios from "axios";

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

//http://localhost:5000/posts/

export const fetchAllPostsAsync = createAsyncThunk(
  "posts/fetchAllPostsAsync",
  async (_, thunkAPI) => {
    try {
      const response = await axios.get("http://localhost:5000/posts/");
      return response.data;
    } catch (error) {
      throw thunkAPI.rejectWithValue({ error: error.message });
    }
  }
);

export const postsingleAsync = createAsyncThunk(
  "posts/postsingleAsync",

  async (post) => await axios.post(`http://localhost:5000/posts/addpost`, post)
);

export const postsSlice = createSlice({
  name: "posts",
  initialState: {
    allposts: [],
    loading: "idle",
    error: "",
    selectedPost: {},
  },
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    selectedpost: (state, action) => {
      state.selectedPost = action.payload;
    },
    createPost: (state, action) => {
      state.allposts = [...state.allposts, action.payload];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(fetchAllPostsAsync.pending, (state, action) => {
      state.allposts = [];
      state.loading = "Loading";
    });
    builder.addCase(fetchAllPostsAsync.fulfilled, (state, action) => {
      state.allposts = action.payload;
      state.loading = "loaded";
    });

    builder.addCase(fetchAllPostsAsync.rejected, (state, action) => {
      state.allposts = "data not loaded";
      state.loading = "error";
      state.error = action.error.message;
    });
    builder.addCase(postsingleAsync.pending, (state, action) => {
      state.allposts = [];
    });
    builder.addCase(postsingleAsync.fulfilled, (state, action) => {
      state.allposts.unshift(action.payload.data);
      state.loading = "loaded";
    });

    builder.addCase(postsingleAsync.rejected, (state, action) => {
      state.error = action.error.message;
    });
  },
});

//export const { incrementByAmount } = postsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.posts.value;

// export const selectAllposts = createSelector(
//   (state) => ({
//     posts: state.posts,
//     loading: state.loading,
//   }),
//   (state) => state
// );

export const { selectedpost, createPost } = postsSlice.actions;
export default postsSlice.reducer;
